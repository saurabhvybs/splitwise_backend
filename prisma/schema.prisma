// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  
  // Optional OAuth-related fields
  providerId         String?        // ID from the OAuth provider
  provider           String?        // "google", "github", etc.
  avatar             String?        // Profile picture URL

  transactions       Transaction[]  @relation("PayerTransaction")
  participatedIn     TransactionParticipant[]
  initiatedFriendships Friendship[] @relation("UserFriendship")
  receivedFriendships  Friendship[] @relation("FriendFriendship")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Transaction {
  id           String       @id @default(uuid())
  description  String
  amount       Float
  category     String?
  date         DateTime     @default(now())
  payerId      String
  payer        User         @relation("PayerTransaction", fields: [payerId], references: [id])
  participants TransactionParticipant[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TransactionParticipant {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  amount        Float
  settled       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([transactionId, userId])
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserFriendship", fields: [userId], references: [id])
  friendId  String
  friend    User     @relation("FriendFriendship", fields: [friendId], references: [id])
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}